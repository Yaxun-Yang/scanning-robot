// Generated by gencpp from file azure_kinect_ros_driver/SetExposureGainRequest.msg
// DO NOT EDIT!


#ifndef AZURE_KINECT_ROS_DRIVER_MESSAGE_SETEXPOSUREGAINREQUEST_H
#define AZURE_KINECT_ROS_DRIVER_MESSAGE_SETEXPOSUREGAINREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace azure_kinect_ros_driver
{
template <class ContainerAllocator>
struct SetExposureGainRequest_
{
  typedef SetExposureGainRequest_<ContainerAllocator> Type;

  SetExposureGainRequest_()
    : exposure(0)
    , gain(0)  {
    }
  SetExposureGainRequest_(const ContainerAllocator& _alloc)
    : exposure(0)
    , gain(0)  {
  (void)_alloc;
    }



   typedef int32_t _exposure_type;
  _exposure_type exposure;

   typedef int32_t _gain_type;
  _gain_type gain;





  typedef boost::shared_ptr< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetExposureGainRequest_

typedef ::azure_kinect_ros_driver::SetExposureGainRequest_<std::allocator<void> > SetExposureGainRequest;

typedef boost::shared_ptr< ::azure_kinect_ros_driver::SetExposureGainRequest > SetExposureGainRequestPtr;
typedef boost::shared_ptr< ::azure_kinect_ros_driver::SetExposureGainRequest const> SetExposureGainRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator1> & lhs, const ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator2> & rhs)
{
  return lhs.exposure == rhs.exposure &&
    lhs.gain == rhs.gain;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator1> & lhs, const ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace azure_kinect_ros_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "118f5ae9e1aacf44af9d676470ddbbdf";
  }

  static const char* value(const ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x118f5ae9e1aacf44ULL;
  static const uint64_t static_value2 = 0xaf9d676470ddbbdfULL;
};

template<class ContainerAllocator>
struct DataType< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "azure_kinect_ros_driver/SetExposureGainRequest";
  }

  static const char* value(const ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 exposure\n"
"int32 gain\n"
;
  }

  static const char* value(const ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.exposure);
      stream.next(m.gain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetExposureGainRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::azure_kinect_ros_driver::SetExposureGainRequest_<ContainerAllocator>& v)
  {
    s << indent << "exposure: ";
    Printer<int32_t>::stream(s, indent + "  ", v.exposure);
    s << indent << "gain: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AZURE_KINECT_ROS_DRIVER_MESSAGE_SETEXPOSUREGAINREQUEST_H
